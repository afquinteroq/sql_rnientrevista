create or replace package body GIC_CATEGORIZACION is
/* 
   MODIFICACION: JOSE VASQUEZ: 05.NOV.2015
   DESCRIPCION: SE HOMOLOGA LAS DESCRIPCIONES LARGAS DE LOS HECHOS VICTIMIZANTES
*/
--OBTIENE LOS PARENTEZCOS EXISTENTES
PROCEDURE GIC_OBTENER_PARENTESCOS(CURSOR_OUT OUT ACCIONSOCIAL.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR
       SELECT * FROM GIC_PARENTESCOGENEALOGICO;
       
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBTENER_PARENTESCOS','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBTENER_PARENTESCOS','');

  END GIC_OBTENER_PARENTESCOS;
  
--OBTIENE LOS TIPO DE CARACTERIZACION
PROCEDURE GIC_OBT_TIPOCARACTERIZACION(CURSOR_OUT OUT ACCIONSOCIAL.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR
      SELECT * FROM GIC_TIPOCARACTERIZACION;
      
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBT_TIPOCARACTERIZACION','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBT_TIPOCARACTERIZACION','');
  END GIC_OBT_TIPOCARACTERIZACION;
  
  --INSERTA REGISTROS EN LA TABLA GIC_PERSONA
  PROCEDURE GIC_INSERT_PERSONAS
  (PNOMBRE IN NVARCHAR2,SNOMBRE IN NVARCHAR2,
   PAPELLIDO IN NVARCHAR2,SAPELLIDO IN NVARCHAR2,
   FNACIMIENTO IN DATE,TDOC IN NVARCHAR2,
   USUARIO IN NVARCHAR2,USU_FCREACION IN DATE,
   NDOCU IN NVARCHAR2,RELAC IN NVARCHAR2,
   ID_DECLAR IN INTEGER, ID_PERS_FUENTE IN INTEGER,
   T_VICTIMA IN NVARCHAR2,ID_SINIESTRO IN INTEGER,
   FUENTEE IN NVARCHAR2, ESTADO IN NVARCHAR2, IDPERMI IN INTEGER, VALSECUENCIA OUT NUMBER
  )
  AS
   p_Tipo VARCHAR2(50);
   TOTAL INTEGER;
  BEGIN
    
         --BLOQUE CAMBIO INSERCION DEBIDO AL NUEVO MODELO, NO HAY NECESIDAD DE HACER LAS VLIDACIONES DE LOS BLOQUES COMENTARIADOS.
         --JAIME LOBATON 11-12-2015
         
     IF TDOC = 'IND' OR TDOC LIKE '%INDOCUMENTADO%'  THEN
       p_Tipo := 'INDOCUMENTADO';
       ELSE
         p_Tipo := TDOC ;
     END IF;
     
     INSERT INTO GIC_PERSONA VALUES(0,UPPER(PNOMBRE),UPPER(SNOMBRE), UPPER(PAPELLIDO),UPPER(SAPELLIDO),
     FNACIMIENTO,p_Tipo,USUARIO,USU_FCREACION, UPPER(NDOCU),RELAC, ID_DECLAR, ID_PERS_FUENTE,
     T_VICTIMA, ID_SINIESTRO, FUENTEE, ESTADO,
     UPPER(PNOMBRE),UPPER(SNOMBRE),UPPER(PAPELLIDO),UPPER(SAPELLIDO),FNACIMIENTO,UPPER(NDOCU),IDPERMI,0);
     
     COMMIT;
     
     SELECT gic_sec_persona.currval INTO VALSECUENCIA FROM DUAL ;    
  
  --BLOQUE CAMBIO INSERCION DEBIDO AL NUEVO MODELO, NO HAY NECESIDAD DE HACER LAS VLIDACIONES DE LOS BLOQUES COMENTARIADOS.
  --JAIME LOBATON 11-12-2015
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_PERSONAS','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_PERSONAS','');
  

  END GIC_INSERT_PERSONAS;

--INSERTAR MIEMBROS HOGAR
PROCEDURE GIC_INSERT_MIEMBRO_HOGAR
  (
    IDHOGAR IN NVARCHAR2,
    ID_PERSONA IN INTEGER,  
    USUARIO IN NVARCHAR2,
    ID_USUARIO IN INTEGER,
    ENCUESTADA IN NVARCHAR2
  )
IS
CONTEO NUMBER;
BEGIN
  
       SELECT COUNT(*) INTO CONTEO 
       FROM GIC_MIEMBROS_HOGAR T WHERE T.HOG_CODIGO=IDHOGAR AND T.PER_IDPERSONA=ID_PERSONA;
       
    IF CONTEO = 0 THEN   
       INSERT INTO GIC_MIEMBROS_HOGAR VALUES (IDHOGAR,ID_PERSONA,USUARIO,ID_USUARIO,SYSDATE, ENCUESTADA,NULL );
       COMMIT;
    END IF ;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_MIEMBRO_HOGAR','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_MIEMBRO_HOGAR','');
  
END GIC_INSERT_MIEMBRO_HOGAR;

--INSERTAR HOGAR 
PROCEDURE GIC_INSERT_HOGAR
  (
    USUA_CREACION IN NVARCHAR2,
    ID_USUARIO IN INTEGER,
    ID_TIPO_CARACTERIZACION IN INTEGER
  )
  IS
  CODIGOENCUESTA VARCHAR2(20);
  idPerfil NUMBER := 0;
  TOTALHOGAR NUMBER :=0;
  TOTALHOGARACTIVO NUMBER := 0;
  BEGIN

    CODIGOENCUESTA := GIC_N_CARACTERIZACION.FN_GET_CODIGOENCUESTA;    
    SELECT COUNT(*) INTO TOTALHOGAR  FROM GIC_HOGAR H WHERE H.HOG_CODIGO = CODIGOENCUESTA;
    
    WHILE TOTALHOGAR > 0 LOOP
            CODIGOENCUESTA := GIC_N_CARACTERIZACION.FN_GET_CODIGOENCUESTA;
            SELECT COUNT(*) INTO TOTALHOGAR  FROM GIC_HOGAR H WHERE H.HOG_CODIGO = CODIGOENCUESTA;
    END LOOP;
    
    IF TOTALHOGAR = 0 THEN
          
          SELECT COUNT(pu.idperfil) INTO idPerfil
          FROM adminusuarios.perfilusuario@DBLINK_VIVANTO pu where pu.idusuario = ID_USUARIO and pu.idperfil in (SELECT PE.IDPERFIL FROM adminusuarioS.PERFIL@DBLINK_VIVANTO PE WHERE PE.IDAPLICACION  IN (309));
          
            IF idPerfil > 0 THEN
              
            SELECT MAX(pu.idperfil) INTO idPerfil
            FROM adminusuarios.perfilusuario@DBLINK_VIVANTO pu where pu.idusuario = ID_USUARIO and pu.idperfil in (SELECT PE.IDPERFIL FROM adminusuarioS.PERFIL@DBLINK_VIVANTO PE WHERE PE.IDAPLICACION  IN (309));
            
            INSERT INTO GIC_HOGAR VALUES(0,TRIM(CODIGOENCUESTA),USUA_CREACION,ID_USUARIO,SYSDATE,ID_TIPO_CARACTERIZACION,CODIGOENCUESTA,'ACTIVA',SYSDATE,USUA_CREACION,idPerfil);
            COMMIT;
            
            ELSE
            
            INSERT INTO GIC_HOGAR VALUES(0,TRIM(CODIGOENCUESTA),USUA_CREACION,ID_USUARIO,SYSDATE,ID_TIPO_CARACTERIZACION,CODIGOENCUESTA,'ACTIVA',SYSDATE,USUA_CREACION,0);
            COMMIT;
            
            END IF;

    ELSE
      SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
      SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
    END IF;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
  
  END GIC_INSERT_HOGAR;
  
PROCEDURE GIC_INSERT_HOGAR1
  (
    USUA_CREACION IN NVARCHAR2,
    ID_USUARIO IN INTEGER,
    ID_TIPO_CARACTERIZACION IN INTEGER,
    MARCADOR OUT NVARCHAR2
  )
  IS
  CODIGOENCUESTA VARCHAR2(20);
  idPerfil NUMBER := 0;
  TOTALHOGAR NUMBER :=0;
  TOTALHOGARACTIVO NUMBER := 0;
  HOGARACTIVO VARCHAR2(20);
  BEGIN

    CODIGOENCUESTA := GIC_N_CARACTERIZACION.FN_GET_CODIGOENCUESTA;    
    SELECT COUNT(*) INTO TOTALHOGAR  FROM GIC_HOGAR H WHERE H.HOG_CODIGO = CODIGOENCUESTA;
    
    WHILE TOTALHOGAR > 0 LOOP
            CODIGOENCUESTA := GIC_N_CARACTERIZACION.FN_GET_CODIGOENCUESTA;
            SELECT COUNT(*) INTO TOTALHOGAR  FROM GIC_HOGAR H WHERE H.HOG_CODIGO = CODIGOENCUESTA;
    END LOOP;
    
    IF TOTALHOGAR = 0 THEN
            
          SELECT COUNT(HO.HOG_CODIGO) INTO TOTALHOGARACTIVO FROM GIC_HOGAR HO WHERE HO.USU_IDUSUARIO  = ID_USUARIO AND HO.ESTADO = 'ACTIVA';    
          
          IF TOTALHOGARACTIVO = 0 THEN
          
          SELECT COUNT(pu.idperfil) INTO idPerfil
          FROM adminusuarios.perfilusuario@DBLINK_VIVANTO pu where pu.idusuario = ID_USUARIO and pu.idperfil in (SELECT PE.IDPERFIL FROM adminusuarioS.PERFIL@DBLINK_VIVANTO PE WHERE PE.IDAPLICACION  IN (309));
          
            IF idPerfil > 0 THEN
              
            SELECT MAX(pu.idperfil) INTO idPerfil
            FROM adminusuarios.perfilusuario@DBLINK_VIVANTO pu where pu.idusuario = ID_USUARIO and pu.idperfil in (SELECT PE.IDPERFIL FROM adminusuarioS.PERFIL@DBLINK_VIVANTO PE WHERE PE.IDAPLICACION  IN (309));
            
            INSERT INTO GIC_HOGAR VALUES(0,TRIM(CODIGOENCUESTA),USUA_CREACION,ID_USUARIO,SYSDATE,ID_TIPO_CARACTERIZACION,CODIGOENCUESTA,'ACTIVA',SYSDATE,USUA_CREACION,idPerfil);
            COMMIT;
            
            ELSE
            
            INSERT INTO GIC_HOGAR VALUES(0,TRIM(CODIGOENCUESTA),USUA_CREACION,ID_USUARIO,SYSDATE,ID_TIPO_CARACTERIZACION,CODIGOENCUESTA,'ACTIVA',SYSDATE,USUA_CREACION,0);
            COMMIT;
            
            END IF;
            MARCADOR :='1';
            ELSE
            SELECT HO.HOG_CODIGO INTO HOGARACTIVO FROM GIC_HOGAR HO WHERE HO.USU_IDUSUARIO  = ID_USUARIO AND HO.ESTADO = 'ACTIVA';    
              MARCADOR :=HOGARACTIVO;
          END IF; 
    ELSE
      SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
      SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
    END IF;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_HOGAR',CODIGOENCUESTA);
  
  END GIC_INSERT_HOGAR1;
  
--OBTIENE EL ID TIPOCARACTERIZACION
PROCEDURE GIC_OBTENER_ID_TIPOCARACT(NOMBRE_TIPO IN NVARCHAR2,ID_TIPOCAR OUT INTEGER)
  AS
  ID INTEGER;
  BEGIN
    SELECT TC.TPOCRN_ID INTO ID FROM GIC_TIPOCARACTERIZACION TC WHERE TC.TPOCRN_NOMBRE=UPPER(NOMBRE_TIPO);
    ID_TIPOCAR:=ID;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBTENER_ID_TIPOCARACT','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBTENER_ID_TIPOCARACT','');
  
  END GIC_OBTENER_ID_TIPOCARACT;
  
--OBTENER EL ULTIMO HOGAR GENERADO POR EL USUARIO
PROCEDURE GIC_OBT_ULT_HOGARXUSUARIO(IDUSUARIO IN INTEGER,IDHOGAR OUT NVARCHAR2)
  AS
  IDHG NVARCHAR2(200);
  BEGIN
  
  SELECT HOG_CODIGO INTO IDHG  FROM GIC_HOGAR
WHERE HOG_ID=(SELECT MAX(HOG_ID) FROM GIC_HOGAR WHERE   USU_IDUSUARIO =IDUSUARIO)   ;
    IDHOGAR:=IDHG;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBT_ULT_HOGARXUSUARIO',IDHG);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBT_ULT_HOGARXUSUARIO',IDHG);  
  
  END GIC_OBT_ULT_HOGARXUSUARIO;
--OBTENER ID PERSONA
PROCEDURE GIC_IDPERSONA(NDOCUMENTO IN NVARCHAR2,PNOMBRE IN NVARCHAR2,IDPERSONA OUT INTEGER)
  AS
   IDPER INTEGER;
  BEGIN
    SELECT P.PER_IDPERSONA INTO IDPER FROM GIC_PERSONA P WHERE TRIM(P.PER_NUMERODOC)=TRIM(NDOCUMENTO) AND TRIM(P.PER_PRIMERNOMBRE)=TRIM(PNOMBRE);
    IDPERSONA:=IDPER;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_IDPERSONA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_IDPERSONA',''); 
  
  END GIC_IDPERSONA;

--VERIFICA SI UNA PERSONA EXISTA EN LA BD
PROCEDURE GIC_VERIFICA_PERSONAS(NDOCUMENTO IN NVARCHAR2,PNOMBRE IN NVARCHAR2,EXISTE OUT INTEGER)
  AS
  CONTADOR INTEGER;
  BEGIN
    SELECT COUNT(*) INTO CONTADOR  FROM GIC_PERSONA GP
    WHERE UPPER(GP.PER_NUMERODOC)=UPPER(NDOCUMENTO) AND UPPER(GP.PER_PRIMERNOMBRE)=UPPER(PNOMBRE);
    EXISTE:=CONTADOR;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_VERIFICA_PERSONAS','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_VERIFICA_PERSONAS',''); 
  
  END GIC_VERIFICA_PERSONAS;

--OBTIENE EL ID DEL PARENTESCO
PROCEDURE GIC_OBTENER_ID_PARENTESCO(PARENTESCO IN NVARCHAR2,ID_PARENTESCO OUT INTEGER)
  AS
  IDPARENT INTEGER;
  BEGIN
    SELECT PG.PRST_ID INTO IDPARENT
    FROM GIC_PARENTESCOGENEALOGICO PG
    WHERE TRIM(PG.PRST_NOMBRE)=TRIM(PARENTESCO);
    ID_PARENTESCO:=IDPARENT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBTENER_ID_PARENTESCO','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBTENER_ID_PARENTESCO',''); 
  
  END GIC_OBTENER_ID_PARENTESCO;

--OBTIENE EL CAMPO JEFE DE HOGAR PARA REALIZAR COMPARACIONES
PROCEDURE GIC_OBTENER_JEFEHOGAR(IDJEFEHOGAR OUT INTEGER)
  AS
  IDJEFE INTEGER;
  BEGIN
    SELECT PG.PRST_ID INTO IDJEFE
    FROM GIC_PARENTESCOGENEALOGICO PG
    WHERE TRIM(PG.PRST_NOMBRE)=TRIM('Jefe(a) de hogar');
    IDJEFEHOGAR:=IDJEFE;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBTENER_JEFEHOGAR','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBTENER_JEFEHOGAR',''); 
  
  END GIC_OBTENER_JEFEHOGAR;

--INSERTA EL ARBOL GENEALOGICO CORRESPONDIENTE
PROCEDURE GIC_INSERT_ARBOLGENEALOGICO(IDPERSONA IN INTEGER,IDPARENTESCO IN INTEGER,IDPERSONA_ASOCIADA IN INTEGER)
  AS
  BEGIN
    INSERT INTO GIC_ARBOLGENEALOGICO VALUES(IDPERSONA,IDPARENTESCO,IDPERSONA_ASOCIADA,SYSDATE);
    COMMIT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_ARBOLGENEALOGICO','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_ARBOLGENEALOGICO',''); 
  
  END GIC_INSERT_ARBOLGENEALOGICO;

--INSERTA EL VALIDADOR DEL ESTADO
PROCEDURE GIC_INSERT_VALIDADOR_HOGAR(IDPERSONA IN INTEGER, CODHOGAR IN  NVARCHAR2,VALIDADOR IN NVARCHAR2, VALIDADOR_TIPOPERSONA IN NVARCHAR2,VALIDADOR_TIPOPERFIL IN NVARCHAR2, IDINSTRUMENTO IN INTEGER  )
  AS
  VALIDADOR_P NUMBER;
  VALIDADOR_TP NUMBER;
  PRE_VALOR_P NVARCHAR2(38);
  BEGIN
    IF TRIM(VALIDADOR)='INCLUIDO' THEN 
       VALIDADOR_P :=1;
    ELSIF TRIM(VALIDADOR)='NO INCLUIDO' THEN 
      VALIDADOR_P :=1;
    END IF;
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,VALIDADOR_P,TRIM(VALIDADOR),CODHOGAR,0,'');
    COMMIT;
    /*Inserta validador tipo persona*/
    IF TRIM(VALIDADOR_TIPOPERSONA)='5001' THEN
       VALIDADOR_TP :=5001;
       PRE_VALOR_P := 'AUTORIZADO';
    ELSIF TRIM(VALIDADOR_TIPOPERSONA)='5002' THEN
      VALIDADOR_TP :=5002;
      PRE_VALOR_P := 'TUTOR';
    ELSIF TRIM(VALIDADOR_TIPOPERSONA)='5003' THEN
      VALIDADOR_TP :=5003;
      PRE_VALOR_P := 'CUIDADOR PERMANENTE';
    ELSIF TRIM(VALIDADOR_TIPOPERSONA)='5004' THEN
      VALIDADOR_TP :=5004;
      PRE_VALOR_P := 'MIEMBRO HOGAR';
    END IF;
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,VALIDADOR_TP,PRE_VALOR_P,CODHOGAR,0,'');
    COMMIT;
    /*hasta aca aca*/
    /*Inserta validador perfil usuario*/
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,'5005',VALIDADOR_TIPOPERFIL,CODHOGAR,0,'');
    COMMIT;
    /**/
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_HOGAR',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_HOGAR',CODHOGAR); 
  
  END GIC_INSERT_VALIDADOR_HOGAR;
  --INSERTA EL VALIDADOR PARENTESCO
PROCEDURE GIC_INSERT_VALIDADOR_PARENT(IDPERSONA IN INTEGER, CODHOGAR IN  NVARCHAR2,VALIDADOR IN NVARCHAR2, IDINSTRUMENTO IN INTEGER  )
  AS
  VALIDADOR_P NUMBER;
  BEGIN
    IF TRIM(VALIDADOR)='JEFE' THEN 
       VALIDADOR_P :=20;
    ELSIF TRIM(VALIDADOR)='NO JEFE' THEN 
      VALIDADOR_P :=21;
    END IF;
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,VALIDADOR_P,TRIM(VALIDADOR),CODHOGAR,0,'');
    COMMIT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_PARENT',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_PARENT',CODHOGAR); 
  
  END GIC_INSERT_VALIDADOR_PARENT;
    --INSERTA EL VALIDADOR TIPOPERSONA
    --21/10/2019
    --CREADO ANDRES QUINTERO  
  PROCEDURE GIC_INSERT_VALIDADOR_TIPOPER(IDPERSONA IN INTEGER, CODHOGAR IN  NVARCHAR2,VALIDADOR IN NVARCHAR2, IDINSTRUMENTO IN INTEGER  )
  AS
  VALIDADOR_P NUMBER;
  PRE_VALOR_P NVARCHAR2(38);
  BEGIN
    IF TRIM(VALIDADOR)='5001' THEN
       VALIDADOR_P :=5001;
       PRE_VALOR_P := 'AUTORIZADO';
    ELSIF TRIM(VALIDADOR)='5002' THEN
      VALIDADOR_P :=5002;
      PRE_VALOR_P := 'TUTOR';
    ELSIF TRIM(VALIDADOR)='5003' THEN
      VALIDADOR_P :=5003;
      PRE_VALOR_P := 'CUIDADOR PERMANENTE';
    ELSIF TRIM(VALIDADOR)='5004' THEN
      VALIDADOR_P :=5004;
      PRE_VALOR_P := 'MIEMBRO HOGAR';
    END IF;
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,VALIDADOR_P,PRE_VALOR_P,CODHOGAR,0,'');
    COMMIT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_TIPOPER',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_TIPOPER',CODHOGAR); 
  
  END GIC_INSERT_VALIDADOR_TIPOPER;
  
--OBTIENE EL CAMPO JEFE DE HOGAR PARA REALIZAR COMPARACIONES
PROCEDURE GIC_OBTENER_ESTADOPER(pPER_IDPERSONA IN INTEGER,ESTADO OUT NVARCHAR2)
  AS
  EST NVARCHAR2(50);
  BEGIN
    SELECT  
CASE WHEN UPPER(PER_ESTADO) ='INCLUIDO' THEN 'INCLUIDO' ELSE 'NO INCLUIDO' END AS ESTADO INTO EST
FROM GIC_PERSONA T WHERE T.PER_IDPERSONA=pPER_IDPERSONA;
    ESTADO:=EST;
  END;

--VALIDA SI EXISTE EL CODIGO DE HOGAR
PROCEDURE GIC_VALIDA_CODIGO(pCODIGO IN NVARCHAR2 ,TOTAL OUT INTEGER)
  AS
  CONT INTEGER;
  BEGIN
    SELECT  COUNT(*) INTO CONT FROM GIC_HOGAR T WHERE T.HOG_CODIGO=pCODIGO;

    TOTAL:=CONT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_VALIDA_CODIGO',pCODIGO);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_VALIDA_CODIGO',pCODIGO);
  
  END GIC_VALIDA_CODIGO;

--VALIDA SI UN COIDGO D EHOGAR TIENE ASOCIADO MIEMBROS
PROCEDURE GIC_VALIDA_MIEMBROS(pCODIGO IN NVARCHAR2 ,TOTAL OUT INTEGER)
  AS
  CONT INTEGER;
  BEGIN
    SELECT  COUNT(*) INTO CONT FROM GIC_MIEMBROS_HOGAR T WHERE T.HOG_CODIGO=pCODIGO;

    TOTAL:=CONT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_VALIDA_MIEMBROS',pCODIGO);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_VALIDA_MIEMBROS',pCODIGO); 
  
  END GIC_VALIDA_MIEMBROS;

--INSERTA FAMILA TEMPORAL
PROCEDURE GIC_INSERT_FAMILIA (pdocumento IN NVARCHAR2, pnombres IN NVARCHAR2, phecho IN  NVARCHAR2,pnombre1 IN NVARCHAR2, 
  pnombre2 IN NVARCHAR2,papellido1 IN NVARCHAR2,papellido2 IN NVARCHAR2, pid IN INTEGER )
  AS

  BEGIN

      INSERT INTO GIC_HOGARES_TEMP VALUES (pid,pdocumento,pnombres,phecho,pnombre1,pnombre2,papellido1,papellido2);
   
    COMMIT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_FAMILIA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_FAMILIA',''); 
  
  END GIC_INSERT_FAMILIA;

function FN_COMPROBARANDOMICO(ID IN INTEGER) return integer is
  Result integer;
begin
    select count(*) into Result from GIC_HOGARES_TEMP  WHERE IDHOGAR = ID;
  return(Result);
  
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'FN_COMPROBARANDOMICO','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'FN_COMPROBARANDOMICO',''); 
  
end FN_COMPROBARANDOMICO;



--CONCATENAR HECHOS POR PERSONA
FUNCTION FN_CONCATENAHECHOS(pCEDULA IN VARCHAR2, pID IN NUMBER )
   RETURN VARCHAR2
IS Result NVARCHAR2(5000);
  HECHOS NVARCHAR2(5000);
  CONTEO NUMBER;
BEGIN   
SELECT
COUNT(TE.NUMERODOCUMENTO) INTO CONTEO
FROM GIC_HOGARES_TEMP TE
WHERE TE.NUMERODOCUMENTO=pCEDULA AND TE.IDHOGAR=pID;

IF CONTEO > 0 THEN
FOR CUR_DATOS IN ( SELECT DISTINCT UPPER(HECHO) AS HECHO FROM  GIC_HOGARES_TEMP TE
WHERE TE.NUMERODOCUMENTO=pCEDULA AND TE.IDHOGAR=pID)
  LOOP
    IF CUR_DATOS.HECHO IS NOT NULL   THEN
   HECHOS :=CONCAT(HECHOS, CONCAT(CUR_DATOS.HECHO,', ')); 
   END IF;
  END LOOP;
  HECHOS :=SUBSTR(HECHOS,1,length(HECHOS)-2) ;
    END IF;
  Result :=HECHOS;
  RETURN Result;
  
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'FN_CONCATENAHECHOS','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'FN_CONCATENAHECHOS',''); 
  
END FN_CONCATENAHECHOS; 

--OBTIENE FAMILIA UNICA
PROCEDURE GIC_OBT_FAMILIA(pID IN NUMBER,CURSOR_OUT OUT ACCIONSOCIAL.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR
    select DISTINCT T.NUMERODOCUMENTO, NOMBRES, gic_categorizacion.fn_concatenahechos(T.NUMERODOCUMENTO,pID) AS HECHO,
T.PRIMERNOMBRE, T.SEGUNDONOMBRE, T.PRIMERAPELLIDO, T.SEGUNDOAPELLIDO 
from GIC_HOGARES_TEMP t where t.idhogar=pID;

Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBT_FAMILIA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBT_FAMILIA',''); 
  
END GIC_OBT_FAMILIA;

--INSERTA EL VALIDADOR HECHO
PROCEDURE GIC_INSERT_VALIDADOR_HECHO_AUX(IDPERSONA IN INTEGER, CODHOGAR IN  NVARCHAR2,ID_HECHO IN INTEGER, IDINSTRUMENTO IN INTEGER, FECHA_HECHO IN  NVARCHAR2)
  AS
  VALIDADOR_P NUMBER;
  VALIDADOR VARCHAR2(100);
  TOTAL_T NUMBER;
  ID_PERSONA_T NUMBER;
  ID_PERSONA NUMBER;
  CODHOGAR_T NVARCHAR2(100);
  BEGIN
  /* MODIFICACION: JOSE VASQUEZ: 05.NOV.2015
     DESCRIPCION: SE HOMOLOGA LAS DESCRIPCIONES LARGAS DE LOS HECHOS VS EL CODIGO NUMERICO QUE VIENE DE FRONTEND
    1  Acto terrorista / Atentados / Combates / Enfrentamientos / Hostigamientos
    2  Amenaza
    3  Delitos contra la libertad y la integridad sexual en desarrollo del conflicto armado
    4  Desaparicion forzada
    5  Desplazamiento forzado
    6  Homicidio
    7  Minas Antipersonal, Municion sin Explotar y Artefacto Explosivo improvisado
    8  Secuestro
    9  Tortura
    10  Vinculacion de Ni?os Ni?as y Adolescentes a Actividades Relacionadas con grupos armados
    11  Abandono o Despojo Forzado de Tierras
    12  Perdida de Bienes Muebles o Inmuebles
    13  Otros
    14  Sin informacion
     
  */
    VALIDADOR_P := 0; ID_PERSONA_T:=0; TOTAL_T :=0; CODHOGAR_T := CODHOGAR;

    IF ID_HECHO =  1  THEN  
       VALIDADOR := 'Acto terrorista / Atentados / Combates / Enfrentamientos / Hostigamientos' ;
       VALIDADOR_P :=101;
    ELSIF ID_HECHO =  2  THEN  
      VALIDADOR := 'Amenaza' ;
      VALIDADOR_P :=102;
    ELSIF ID_HECHO =  3  THEN  
      VALIDADOR := 'Delitos contra la libertad y la integridad sexual en desarrollo del conflicto armado' ;
      VALIDADOR_P :=103;
     ELSIF ID_HECHO = 4  THEN  
      VALIDADOR := 'Desaparicion forzada' ;
      VALIDADOR_P :=104;
    ELSIF ID_HECHO =  5  THEN  
      VALIDADOR := 'Desplazamiento forzado' ;
      VALIDADOR_P :=105;
    ELSIF ID_HECHO =  6  THEN  
      VALIDADOR := 'Homicidio' ;
      VALIDADOR_P :=106;
    ELSIF ID_HECHO =  7  THEN  
      VALIDADOR := 'Minas Antipersonal, Municion sin Explotar y Artefacto Explosivo improvisado' ;
      VALIDADOR_P :=107;
    ELSIF ID_HECHO =  8  THEN  
      VALIDADOR :='Secuestro' ;
      VALIDADOR_P :=108;
    ELSIF ID_HECHO =  9  THEN  
      VALIDADOR := 'Tortura' ;
      VALIDADOR_P :=109;
    ELSIF ID_HECHO =  10  THEN  
      VALIDADOR := 'Vinculacion de Ni?os Ni?as y Adolescentes a Actividades Relacionadas con grupos armados' ;
      VALIDADOR_P :=110;
    ELSIF ID_HECHO =  11  THEN  
      VALIDADOR := 'Abandono o Despojo Forzado de Tierras' ;
      VALIDADOR_P := 111;
    ELSIF ID_HECHO =  12  THEN  
      VALIDADOR := 'Perdida de Bienes Muebles o Inmuebles' ;
      VALIDADOR_P :=112;
    ELSIF ID_HECHO =  13  THEN  
      VALIDADOR := 'Otros' ; 
      VALIDADOR_P := 113;
    ELSIF ID_HECHO =  14  THEN  
      VALIDADOR := 'Sin informacion' ;
      VALIDADOR_P :=114;
    END IF;

    IF VALIDADOR_P <> 0 THEN
      INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,VALIDADOR_P,UPPER(TRIM(VALIDADOR)),CODHOGAR,0,FECHA_HECHO);
    END IF;  
    COMMIT;
    GIC_INSERT_VALIDADOR_ARES(CODHOGAR_T);
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_HECHO_AUX',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_HECHO_AUX',CODHOGAR); 
    
  END GIC_INSERT_VALIDADOR_HECHO_AUX;


--INSERTA EL VALIDADOR HECHO
PROCEDURE GIC_INSERT_VALIDADOR_HECHO(IDPERSONA IN INTEGER, CODHOGAR IN  NVARCHAR2,VALIDADOR IN NVARCHAR2, IDINSTRUMENTO IN INTEGER  )
  AS
  VALIDADOR_P NUMBER;
  BEGIN
    IF UPPER(TRIM(VALIDADOR))=UPPER('Acto terrorista / Atentados / Combates / Enfrentamientos / Hostigamientos') THEN 
       VALIDADOR_P :=101;
    ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Amenaza') THEN 
      VALIDADOR_P :=102;
    ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Delitos contra la libertad y la integridad sexual en desarrollo del conflicto armado') THEN 
      VALIDADOR_P :=103;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Desaparicion forzada') THEN 
      VALIDADOR_P :=104;
        ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Desplazamiento forzado') THEN 
      VALIDADOR_P :=105;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Homicidio') THEN 
      VALIDADOR_P :=106;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Minas Antipersonal, Municion sin Explotar y Artefacto Explosivo improvisado') THEN 
      VALIDADOR_P :=107;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Secuestro') THEN 
      VALIDADOR_P :=108;
         ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Tortura') THEN 
      VALIDADOR_P :=109;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Vinculacion de Ni?os Ni?as y Adolescentes a Actividades Relacionadas con grupos armados') THEN 
      VALIDADOR_P :=110;
        ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Abandono o Despojo Forzado de Tierras') THEN 
      VALIDADOR_P :=111;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Perdida de Bienes Muebles o Inmuebles') THEN 
      VALIDADOR_P :=112;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Otros') THEN 
      VALIDADOR_P :=113;
       ELSIF UPPER(TRIM(VALIDADOR))=UPPER('Sin informacion') THEN 
      VALIDADOR_P :=114;
    END IF;
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,VALIDADOR_P,UPPER(TRIM(VALIDADOR)),CODHOGAR,0,'');
    COMMIT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_HECHO',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_HECHO',CODHOGAR); 
  
  END GIC_INSERT_VALIDADOR_HECHO;

--OBTIENE FILTRO USUARIO
PROCEDURE FILTRA_USUARIOS(pUSUARIO IN NVARCHAR2,CURSOR_OUT OUT ACCIONSOCIAL.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR
      SELECT t.usu_usuario as USUARIO FROM GIC_USUARIO T WHERE T.USU_USUARIO LIKE '%'||pUSUARIO||'%';

  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'FILTRA_USUARIOS','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'FILTRA_USUARIOS',''); 
  
  END FILTRA_USUARIOS;

--ELIMINA HOGAR TEMPORAL
PROCEDURE GIC_ELIMINAR_TEMP(pIDTEMP IN INTEGER)
  IS
  BEGIN
      DELETE FROM GIC_HOGARES_TEMP T WHERE T.IDHOGAR=pIDTEMP;
      COMMIT;
      
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_ELIMINAR_TEMP','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_ELIMINAR_TEMP',''); 
  
  END GIC_ELIMINAR_TEMP;
  
--CONSULTA LOS MIEMBROS DEL HOGAR
PROCEDURE GIC_MIEMBROS_HOGAR(CODHOGAR IN NVARCHAR2, CURSOR_OUT OUT gic_cursor.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR 
        SELECT PE.PER_PRIMERNOMBRE, PE.PER_SEGUNDONOMBRE, PE.PER_PRIMERAPELLIDO, PE.PER_SEGUNDOAPELLIDO, PE.PER_ESTADO
        FROM GIC_MIEMBROS_HOGAR H, GIC_PERSONA PE
        WHERE H.PER_IDPERSONA = PE.PER_IDPERSONA
        AND H.HOG_CODIGO = CODHOGAR;
        
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_MIEMBROS_HOGAR',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_MIEMBROS_HOGAR',CODHOGAR); 
  
END GIC_MIEMBROS_HOGAR;  


--VERIFICA SI EL ARCHIVO EXISTE
PROCEDURE GIC_EXISTE_COLILLA(CODHOGAR IN NVARCHAR2,CONTEO OUT INTEGER)
  AS
  ID INTEGER;
  BEGIN
    SELECT COUNT (*) INTO ID FROM GIC_ARCHIVOCOLILLA T WHERE T.HOG_CODIGO=CODHOGAR;
    CONTEO:=ID;
  
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_EXISTE_COLILLA',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_EXISTE_COLILLA',CODHOGAR); 
  
  END GIC_EXISTE_COLILLA;
  
--ACTUALIZA ENCUESTADO
PROCEDURE GIC_ACTUALIZA_ENCUESTADO (pIdPersona IN NUMBER, pCodigo IN NVARCHAR2)
  AS
 -- IDG NUMBER;
  BEGIN
    
    UPDATE GIC_MIEMBROS_HOGAR T SET T.PER_ENCUESTADA='SI' WHERE  T.HOG_CODIGO=pCodigo AND T.PER_IDPERSONA=pIdPersona;
    COMMIT;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_ACTUALIZA_ENCUESTADO',pCodigo);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_ACTUALIZA_ENCUESTADO',pCodigo); 
  
  END GIC_ACTUALIZA_ENCUESTADO; 
  
--CONSULTA LOS DATOS DELAS PERSONAS CARACTERIZADAS NO INCLUIDAS
PROCEDURE GIC_OBTENER_PERSONAS(NUMDOCUMENTO IN NVARCHAR2, CURSOR_OUT OUT gic_cursor.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR 
        
        SELECT PE.PER_IDPERSONA, PE.PER_TIPODOC, PE.PER_NUMERODOC, PE.PER_PRIMERNOMBRE, PE.PER_SEGUNDONOMBRE, PE.PER_PRIMERAPELLIDO, PE.PER_SEGUNDOAPELLIDO, PE.PER_ESTADO, TO_CHAR(PE.PER_FECHANACIMIENTO,'dd/mm/yyyy') AS PER_FECHANACIMIENTO,
        B.FECHA_CARACTERIZACION , B.HABILITADO_CARAC
        FROM GIC_PERSONA PE  LEFT JOIN 
        -- CAMBIO JOSE VASQUEZ - 27.OCT.2015.  TRAE FECHA ULTIMA CARACERIZACION Y SI ESTA HABILITADO PARA CARACTERIZACION
            (SELECT FECHA_CARACTERIZACION , PER_IDPERSONA , 'SI' HABILITADO_CARAC FROM (
                  Select MAX(h.fecha_estado) FECHA_CARACTERIZACION, T.PER_IDPERSONA 
                  from gic_miembros_hogar t, gic_hogar h  
                  where t.hog_codigo=h.hog_codigo
                  and h.estado = 'CERRADA'
                  GROUP BY T.PER_IDPERSONA) A , GIC_PARAMETROS P
              WHERE   P.ID = 1 -- PARAMETRO TEMPORALIDAD MAXIMA EN DIAS PARA CARACTERIZACION 
              AND (SYSDATE  - A.FECHA_CARACTERIZACION   > P.valor_numerico)
            ) B ON (B.PER_IDPERSONA = PE.PER_IDPERSONA )
        WHERE PE.PER_NUMERODOC = NUMDOCUMENTO AND
  -- CAMBIO JOSE VASQUEZ - 28.OCT.2015.  TRAE LOS REGISTROS INCLUIDOS Y NO INCLUIDOS
        PE.PER_ESTADO IN ( 'NO INCLUIDO' , 'INCLUIDO')  ;
        
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_OBTENER_PERSONAS','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_OBTENER_PERSONAS',''); 
  
END GIC_OBTENER_PERSONAS;    
  
  
PROCEDURE GIC_INSERT_PRUEBA
(FNACIMIENTO IN DATE,
 T_VICTIMA IN NVARCHAR2,ID_SINIESTRO IN INTEGER)
AS
 TOTAL INTEGER;
BEGIN
   
   SELECT 1 INTO TOTAL FROM DUAL ;    
   
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_PRUEBA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_PRUEBA','');    


END GIC_INSERT_PRUEBA;
--08/01/2020
--CONSULTA EL ESTADO DE LA PERSONA EN LA FICHA DE CARACTERIZACION, PARA SABER SI SE HABILITA PARA ENCUESTAR O NO
PROCEDURE GIC_VALIDAR_PERSONA_ENCUESTADA(NUMDOCUMENTO IN NVARCHAR2, idPerfilUsuario NVARCHAR2, CURSOR_OUT OUT gic_cursor.cursor_select)
  IS
  BEGIN
  
    IF (idPerfilUsuario = '1230' AND NUMDOCUMENTO NOT IN('24590011','55164628') ) OR (idPerfilUsuario = '1190' AND NUMDOCUMENTO NOT IN('24590011','551646280')) THEN
    
    OPEN CURSOR_OUT FOR         
        SELECT PE.PER_IDPERSONA, PE.R_NUMERODOC PER_NUMERODOC, PE.R_PRIMERNOMBRE PER_PRIMERNOMBRE, 
        PE.R_SEGUNDONOMBRE PER_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO PER_PRIMERAPELLIDO,
        PE.R_SEGUNDOAPELLIDO PER_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO,
        H.USU_FECHACREACION , MAX(H.FECHA_ESTADO) FECHA_ESTADO
        FROM GIC_PERSONA PE JOIN GIC_MIEMBROS_HOGAR MH ON PE.PER_IDPERSONA=MH.PER_IDPERSONA
        JOIN GIC_HOGAR H ON MH.HOG_CODIGO=H.HOG_CODIGO
        WHERE PE.R_NUMERODOC = NUMDOCUMENTO AND UPPER(H.ESTADO) IN ('CERRADA', 'APLAZADA', 'ACTIVA')
        GROUP BY PE.PER_IDPERSONA, PE.R_NUMERODOC, PE.R_PRIMERNOMBRE, PE.R_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO, PE.R_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO, H.USU_FECHACREACION
        HAVING MAX(H.FECHA_ESTADO) >SYSDATE-/*0*/730;

    
    ELSE
          OPEN CURSOR_OUT FOR         
        SELECT PE.PER_IDPERSONA, PE.R_NUMERODOC PER_NUMERODOC, PE.R_PRIMERNOMBRE PER_PRIMERNOMBRE, 
        PE.R_SEGUNDONOMBRE PER_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO PER_PRIMERAPELLIDO,
        PE.R_SEGUNDOAPELLIDO PER_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO,
        H.USU_FECHACREACION , MAX(H.FECHA_ESTADO) FECHA_ESTADO
        FROM GIC_PERSONA PE JOIN GIC_MIEMBROS_HOGAR MH ON PE.PER_IDPERSONA=MH.PER_IDPERSONA
        JOIN GIC_HOGAR H ON MH.HOG_CODIGO=H.HOG_CODIGO
        WHERE PE.R_NUMERODOC = NUMDOCUMENTO AND UPPER(H.ESTADO) IN ('CERRADA', 'APLAZADA', 'ACTIVA')
        GROUP BY PE.PER_IDPERSONA, PE.R_NUMERODOC, PE.R_PRIMERNOMBRE, PE.R_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO, PE.R_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO, H.USU_FECHACREACION
        HAVING MAX(H.FECHA_ESTADO) >SYSDATE-0;
    
    END IF;
        
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_VALIDAR_PERSONA_ENCUESTADA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_VALIDAR_PERSONA_ENCUESTADA',''); 

END GIC_VALIDAR_PERSONA_ENCUESTADA;  


PROCEDURE GIC_VALIDAR_ARCHIVO_SOPORTES(NUMDOCUMENTO IN NVARCHAR2, CURSOR_OUT OUT gic_cursor.cursor_select)
  IS
  BEGIN
    OPEN CURSOR_OUT FOR
        SELECT * FROM GIC_ARCHIVO_SOPORTES T WHERE T.ID_TEMPORAL = 0;

Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_VALIDAR_ARCHIVO_SOPORTES','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_VALIDAR_ARCHIVO_SOPORTES',''); 
  
END GIC_VALIDAR_ARCHIVO_SOPORTES;  

PROCEDURE GIC_VALIDAR_PERSONA_ENCUESTAD1(NUMDOCUMENTO IN NVARCHAR2, idPerfilUsuario NVARCHAR2, RUTACARACTERIZACION NVARCHAR2,
  CURSOR_OUT OUT gic_cursor.cursor_select)
  IS
  BEGIN
    IF (RUTACARACTERIZACION = 'Ruta General' AND idPerfilUsuario = '1230') OR (RUTACARACTERIZACION = 'Ruta General' AND idPerfilUsuario = '1190') OR
       (RUTACARACTERIZACION = 'RUTA GENERAL' AND idPerfilUsuario = '1230') OR (RUTACARACTERIZACION = 'RUTA GENERAL' AND idPerfilUsuario = '1190') THEN   
      OPEN CURSOR_OUT FOR  
        SELECT PE.PER_IDPERSONA, PE.R_NUMERODOC PER_NUMERODOC, PE.R_PRIMERNOMBRE PER_PRIMERNOMBRE, 
        PE.R_SEGUNDONOMBRE PER_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO PER_PRIMERAPELLIDO,
        PE.R_SEGUNDOAPELLIDO PER_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO,
        H.USU_FECHACREACION , MAX(H.FECHA_ESTADO) FECHA_ESTADO
        FROM GIC_PERSONA PE JOIN GIC_MIEMBROS_HOGAR MH ON PE.PER_IDPERSONA=MH.PER_IDPERSONA
        JOIN GIC_HOGAR H ON MH.HOG_CODIGO=H.HOG_CODIGO
        WHERE PE.R_NUMERODOC = NUMDOCUMENTO AND UPPER(H.ESTADO) IN ('CERRADA', 'APLAZADA', 'ACTIVA')
        GROUP BY PE.PER_IDPERSONA, PE.R_NUMERODOC, PE.R_PRIMERNOMBRE, PE.R_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO, PE.R_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO, H.USU_FECHACREACION
        HAVING MAX(H.FECHA_ESTADO) >SYSDATE-/*0*/730;
    ELSE
      OPEN CURSOR_OUT FOR         
        SELECT PE.PER_IDPERSONA, PE.R_NUMERODOC PER_NUMERODOC, PE.R_PRIMERNOMBRE PER_PRIMERNOMBRE, 
        PE.R_SEGUNDONOMBRE PER_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO PER_PRIMERAPELLIDO,
        PE.R_SEGUNDOAPELLIDO PER_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO,
        H.USU_FECHACREACION , MAX(H.FECHA_ESTADO) FECHA_ESTADO
        FROM GIC_PERSONA PE JOIN GIC_MIEMBROS_HOGAR MH ON PE.PER_IDPERSONA=MH.PER_IDPERSONA
        JOIN GIC_HOGAR H ON MH.HOG_CODIGO=H.HOG_CODIGO
        WHERE PE.R_NUMERODOC = NUMDOCUMENTO AND UPPER(H.ESTADO) IN ('CERRADA', 'APLAZADA', 'ACTIVA')
        GROUP BY PE.PER_IDPERSONA, PE.R_NUMERODOC, PE.R_PRIMERNOMBRE, PE.R_SEGUNDONOMBRE, PE.R_PRIMERAPELLIDO, PE.R_SEGUNDOAPELLIDO,
        H.HOG_CODIGO, H.ESTADO, H.USU_USUARIOCREACION, H.USU_USUARIOESTADO, H.USU_FECHACREACION
        HAVING MAX(H.FECHA_ESTADO) >SYSDATE-0;
    END IF;
        
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_VALIDAR_PERSONA_ENCUESTADA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_VALIDAR_PERSONA_ENCUESTADA',''); 

END GIC_VALIDAR_PERSONA_ENCUESTAD1;  

  PROCEDURE GIC_INSERT_VALIDADOR_PERFIL(IDPERSONA IN INTEGER, CODHOGAR IN  NVARCHAR2,VALIDADOR IN NVARCHAR2, IDINSTRUMENTO IN INTEGER  )
  AS
  VALIDADOR_P NUMBER;
  PRE_VALOR_P NVARCHAR2(38);
  BEGIN    
    INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (IDINSTRUMENTO,IDPERSONA,'5005',VALIDADOR,CODHOGAR,0,'');
    COMMIT;

Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_PERFIL',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_PERFIL',CODHOGAR); 
  
  END GIC_INSERT_VALIDADOR_PERFIL;
  
  
  PROCEDURE GIC_INSERT_VALIDADOR_ARES(CODHOGAR IN  NVARCHAR2 )
AS

  --PRE_VALOR_P NVARCHAR2(38);
  TOTAL_DESPLAZAMIENTO NUMBER;
  TOTAL_T NUMBER;
  ID_PERSONA_T NUMBER;
  ID_PERSONA_B NUMBER;
  BEGIN       
    TOTAL_T :=0; ID_PERSONA_T :=0; TOTAL_DESPLAZAMIENTO :=0;    

          SELECT COUNT(GVP.PER_IDPERSONA) INTO TOTAL_DESPLAZAMIENTO FROM GIC_N_VALIDADORESXPERSONA GVP WHERE GVP.VAL_IDVALIDADOR IN (506) AND GVP.HOG_CODIGO = CODHOGAR;          
          IF TOTAL_DESPLAZAMIENTO = 0 THEN          
              SELECT COUNT(GVP.PER_IDPERSONA) INTO TOTAL_T FROM GIC_N_VALIDADORESXPERSONA GVP WHERE GVP.VAL_IDVALIDADOR IN (5001/*,5002,5003*/) AND GVP.HOG_CODIGO = CODHOGAR;
              IF TOTAL_T > 0 THEN
                    SELECT GVP.PER_IDPERSONA INTO ID_PERSONA_T FROM GIC_N_VALIDADORESXPERSONA GVP WHERE GVP.VAL_IDVALIDADOR IN (5001/*,5002,5003*/) AND GVP.HOG_CODIGO = CODHOGAR;
                    SELECT COUNT(GVP.PER_IDPERSONA) INTO ID_PERSONA_B FROM GIC_N_VALIDADORESXPERSONA GVP WHERE GVP.VAL_IDVALIDADOR IN (105) AND GVP.HOG_CODIGO = CODHOGAR;
                   
                    IF ID_PERSONA_B > 0 THEN                      
                          INSERT INTO GIC_N_VALIDADORESXPERSONA VALUES (1,ID_PERSONA_T,'506',UPPER(TRIM('DESPLAZAMIENTO FORZADO')),CODHOGAR,1,'');
                          COMMIT;
                       TOTAL_T :=0;
                      ELSE
                          TOTAL_T :=0;
                      END IF;
              ELSE
                NULL;
              END IF;
          END IF;
          
          
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_INSERT_VALIDADOR_ARES',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_INSERT_VALIDADOR_ARES',CODHOGAR); 
          
  END GIC_INSERT_VALIDADOR_ARES;
  
  
--VERIFICA SI EL ARCHIVO EXISTE
PROCEDURE GIC_EXISTE_CONSTANCIAFIRMADA(CODHOGAR IN NVARCHAR2,CONTEO OUT INTEGER)
AS
  ID INTEGER;
  BEGIN
    SELECT COUNT (*) INTO ID FROM GIC_N_CONSTANCIA_FIRMADA_SAAH T WHERE T.HOG_CODIGO=CODHOGAR;
    CONTEO:=ID;
    
  Exception  when others then
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'GIC_EXISTE_CONSTANCIAFIRMADA',CODHOGAR);
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'GIC_EXISTE_CONSTANCIAFIRMADA',CODHOGAR); 

END GIC_EXISTE_CONSTANCIAFIRMADA;


FUNCTION FN_GET_HOGAR(pCODHOGAR IN VARCHAR2) RETURN NUMBER
 IS RESULT INTEGER;
 EXISHOGAR NUMBER;

 BEGIN
  SELECT COUNT(RES.HOG_CODIGO) INTO EXISHOGAR
  FROM GIC_HOGAR res
  WHERE res.Hog_Codigo=pCODHOGAR;  
  RESULT :=EXISHOGAR;
  RETURN RESULT ;

   Exception    when others then
   return 0;
      

  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'FN_GET_HOGAR_CERRAD_CONSTANCIA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'FN_GET_HOGAR_CERRAD_CONSTANCIA','');
      
END  FN_GET_HOGAR; 

--17/03/2020 PARA ACTUALIZAR ESTADO PARA LA SAAH
FUNCTION FN_UPDATE_HOGAR_SAAH(pCODHOGAR IN VARCHAR2,
  pESTADO IN VARCHAR2,
  pIDUSUARIO IN VARCHAR2,
  pUSUARIO IN VARCHAR2) RETURN NUMBER
  
 IS RESULT INTEGER;
 EXISHOGAR NUMBER;
 idPerfil NUMBER;
 TENCUESTA NUMBER;
 TESTADOENCUESTA NUMBER;

 BEGIN
 
  SELECT COUNT(RES.HOG_CODIGO) INTO EXISHOGAR
  FROM GIC_HOGAR res
  WHERE res.Hog_Codigo=pCODHOGAR;

  SELECT COUNT(*) INTO TENCUESTA FROM GIC_HOGAR   
  WHERE HOG_CODIGO = pCODHOGAR AND ID_PERFIL_USUARIO IN (1230,1190);
  

  /*
  SELECT COUNT(pu.idperfil) INTO idPerfil
  FROM adminusuarios.perfilusuario@DBLINK_VIVANTO pu
  where pu.idusuario = ID_USUARIO
  and pu.idperfil in
  (SELECT PE.IDPERFIL FROM adminusuarioS.PERFIL@DBLINK_VIVANTO PE WHERE PE.IDAPLICACION  IN (87));*/
  /*
  SELECT PU.USUARIOINGRESO
  FROM adminusuarios.USUARIO@DBLINK_VIVANTO pu
  where pu.idusuario = '50214';
  */  
  
  IF EXISHOGAR > 0 AND TENCUESTA > 0 THEN
    
  IF pEstado = 'ASIGNAR' THEN
  
    SELECT COUNT(*) INTO TESTADOENCUESTA FROM GIC_HOGAR   
    WHERE HOG_CODIGO = pCODHOGAR AND ID_PERFIL_USUARIO IN (1230,1190) AND ESTADO IN ('ACTIVA','APLAZADA');
    
    IF  TESTADOENCUESTA > 0 THEN
      UPDATE   GIC_HOGAR SET ESTADO = 'ACTIVA', USU_USUARIOESTADO = pUSUARIO
      WHERE HOG_CODIGO = pCODHOGAR AND ID_PERFIL_USUARIO IN (1230,1190);
      EXISHOGAR :=1;
     ELSE
       EXISHOGAR :=10;
    END IF;
  
  ELSE
    UPDATE   GIC_HOGAR SET ESTADO = pEstado, USU_USUARIOESTADO = pUSUARIO
    WHERE HOG_CODIGO = pCODHOGAR AND ID_PERFIL_USUARIO IN (1230,1190);
  END IF;    
  
  
  IF pEstado = 'ANULADA' THEN
  
    DELETE GIC_N_PREGUNTASDERIVADAS P WHERE P.HOG_CODIGO = pCODHOGAR;
    INSERT INTO GIC_N_RESPUESTASENCUESTA_C SELECT * FROM GIC_N_RESPUESTASENCUESTA R WHERE R.HOG_CODIGO = pCODHOGAR;
    DELETE GIC_N_RESPUESTASENCUESTA R WHERE R.HOG_CODIGO = pCODHOGAR;

  END IF;
  COMMIT;
  

  
  ELSE
   EXISHOGAR :=0;
  END IF;
  
  RESULT :=EXISHOGAR;
  RETURN RESULT ;

  Exception    when others then
  RETURN 10;
      

  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_backtrace,null,null,NULL,'FN_GET_HOGAR_CERRAD_CONSTANCIA','');
  SP_GEN_LOG_ERROR(SYSDATE,DBMS_UTILITY.format_error_stack,null,null,NULL,'FN_GET_HOGAR_CERRAD_CONSTANCIA','');
      
END  FN_UPDATE_HOGAR_SAAH; 

  
END GIC_CATEGORIZACION;
